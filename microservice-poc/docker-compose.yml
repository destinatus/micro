services:
  service:
    build:
      context: .
      dockerfile: Dockerfile
    deploy:
      replicas: 10
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=microservice_poc
      - NODE_ENV=production
      - CONSUL_HOST=consul
      - CONSUL_PORT=8500
      - MICROSERVICE_HOST=0.0.0.0
    hostname: "{{.Task.Name}}"
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
      - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    networks:
      - microservice_net

  postgres:
    image: postgres:14
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=microservice_poc
      - POSTGRES_MAX_CONNECTIONS=200
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command: 
      - "postgres"
      - "-c"
      - "max_connections=200"
      - "-c"
      - "shared_buffers=256MB"
      - "-c"
      - "wal_level=logical"
      - "-c"
      - "max_wal_senders=10"
      - "-c"
      - "max_replication_slots=10"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - microservice_net

networks:
  microservice_net:
    driver: bridge
    
volumes:
  postgres_data:
